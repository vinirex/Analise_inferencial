from matplotlib import pyplot as plt
import streamlit as st
import pandas as pd
import numpy as np
import scipy.stats as stats
import seaborn as sns
from streamlit_extras.app_logo import add_logo


# Configura√ß√£o da p√°gina
st.set_page_config(page_title="Exporta√ß√£o Brasileira", layout="wide")

# Criando as p√°ginas
menu = ["Home üè†", "Dados üìä", "An√°lise üìã", "Entendimentos üìö"]
escolha = st.sidebar.radio("", menu)

# Sess√£o de Colaboradores
st.sidebar.title("Colaboradores ü§ù")
colaboradores = [
    {"nome": "Vinicius Silva - RM553240", "foto": "img/vinicius.jpg"},
    {"nome": "Diogo Julio - RM553837", "foto": "img/diogo.jpg"},
    {"nome": "Jonata Rafael - RM552939", "foto": "img/jonata.jpg"},
    {"nome": "Victor Didoff - RM552965", "foto": "img/didoff.jpg"},
    {"nome": "Matheu Zottis - RM94119", "foto": "img/zottis.jpg"},
]

for colaborador in colaboradores:
    st.sidebar.image(colaborador["foto"], width=50)
    st.sidebar.write(colaborador["nome"])
# Informa√ß√µes de contato na barra lateral
st.sidebar.title("Contato üì¨")
st.sidebar.info("""
**Autor:** Vinicius Silva  
**Projeto:** Data Science e Estat√≠stica   
**LinkedIn:** [LinkedIn](https://www.linkedin.com/in/-vini-silva/)  
**GitHub:** [GitHub](https://github.com/vinirex)
""")

# Carregar os dados
file_path = "Exporta√ß√£o_Brasileira_Anual.xlsx"  # Substitua pelo caminho real do arquivo
df = pd.read_excel(file_path)

if escolha == "Home üè†":
    st.title("Exporta√ß√£o Brasileira")
    st.image("img/porto-de-santos.jpg", use_container_width=True)
    st.write("""
    A exporta√ß√£o √© um dos principais motores da economia brasileira, abrangendo diversos setores, 
    desde produtos agr√≠colas at√© manufaturados e bens de capital. Entender os dados da exporta√ß√£o 
    nos ajuda a compreender as tend√™ncias econ√¥micas, os desafios e as oportunidades do Brasil no com√©rcio global.
    """)
    
    st.subheader("Sobre os Dados")
    st.write("""
    O dataset utilizado cont√©m informa√ß√µes detalhadas sobre a exporta√ß√£o brasileira. Algumas das colunas presentes incluem:
    - **Data**: O per√≠odo da exporta√ß√£o registrado no dataset.
    - **Valor_BK, Valor_BI, Valor_BC, Valor_CL**: Representam os valores exportados em diferentes categorias de produtos.
    - **VarBK, VarBI, VarBC, VarCL**: Vari√°veis que mostram as varia√ß√µes percentuais nos valores exportados.
    - **Part_BK, Part_BI, Part_BC, Part_CL**: Representam a participa√ß√£o percentual de cada categoria no total exportado.
    """)
    
    st.subheader("Perguntas que os dados podem responder")
    st.write("""
    - Como os valores exportados variaram ao longo dos anos?
    - Quais produtos apresentam maior crescimento em exporta√ß√µes?
    - Existe uma sazonalidade nas exporta√ß√µes?
    - Como diferentes categorias de produtos contribuem para o total exportado?
    """)
    st.write("## Aqui est√£o os dados utilizados para an√°lise:")
    st.dataframe(df)
    
elif escolha == "Dados üìä":
    st.title("Dados de Exporta√ß√£o Brasileira")
    
    # Remover 'Data' da lista de colunas num√©ricas
    numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()
    if "Data" in numeric_cols:
        numeric_cols.remove("Data")
    
    # Permitir ao usu√°rio selecionar uma coluna para an√°lise estat√≠stica
    selected_column = st.selectbox("Selecione a coluna para an√°lise estat√≠stica:", numeric_cols)
    
    # Exibir os dados da coluna selecionada junto com a coluna 'Data', se existir
    if "Data" in df.columns:
        data_for_analysis = df[["Data", selected_column]].dropna()
    else:
        data_for_analysis = df[[selected_column]].dropna()

    # Calcular estat√≠sticas
    col1, col2, col3 = st.columns(3)
    mean_val = data_for_analysis[selected_column].mean()
    median_val = data_for_analysis[selected_column].median()
    mode_series = data_for_analysis[selected_column].mode()
    mode_val = mode_series.iloc[0] if not mode_series.empty else np.nan
    
    col1.metric("M√©dia", f"{mean_val:,.2f}")
    col2.metric("Mediana", f"{median_val:,.2f}")
    col3.metric("Moda", f"{mode_val:,.2f}")
    
    # Resumo interpretativo da coluna selecionada
    st.subheader("Resumo da Coluna Selecionada")
    resumo_colunas = {
        "Valor_BK": ("Valores exportados de **Bens de Capital** ‚Äì m√°quinas e equipamentos industriais. "
                     "Refletem o investimento em infraestrutura e desenvolvimento tecnol√≥gico."),
        "Valor_BI": ("Valores exportados de **Bens Intermedi√°rios** ‚Äì insumos como a√ßo, qu√≠micos e componentes. "
                     "S√£o essenciais para a cadeia produtiva e indicam integra√ß√£o industrial."),
        "Valor_BC": ("Valores exportados de **Bens de Consumo** ‚Äì produtos finais como roupas e eletrodom√©sticos. "
                     "Indicadores de competitividade do Brasil no mercado consumidor."),
        "Valor_CL": ("Valores exportados de **Combust√≠veis e Lubrificantes** ‚Äì √≥leo bruto, derivados e similares. "
                     "Ligados √† extra√ß√£o de petr√≥leo e √† matriz energ√©tica do pa√≠s."),
        "VarBK": ("**Varia√ß√£o percentual anual dos Bens de Capital** exportados. "
                  "Indica crescimento ou retra√ß√£o do setor em rela√ß√£o ao ano anterior."),
        "VarBI": ("**Varia√ß√£o percentual anual dos Bens Intermedi√°rios**. "
                  "Aponta din√¢mica da cadeia de produ√ß√£o industrial e demanda global."),
        "VarBC": ("**Varia√ß√£o percentual anual dos Bens de Consumo**. "
                  "Reflete altera√ß√µes na demanda externa por produtos finais brasileiros."),
        "VarCL": ("**Varia√ß√£o percentual anual de Combust√≠veis e Lubrificantes** exportados. "
                  "Fortemente influenciada por pre√ßos internacionais e produ√ß√£o interna."),
        "Part_BK": ("**Participa√ß√£o percentual dos Bens de Capital** nas exporta√ß√µes totais do Brasil. "
                    "Demonstra o peso desse setor na economia exportadora."),
        "Part_BI": ("**Participa√ß√£o percentual dos Bens Intermedi√°rios** no total exportado. "
                    "Mostra a relev√¢ncia da ind√∫stria de base."),
        "Part_BC": ("**Participa√ß√£o percentual dos Bens de Consumo**. "
                    "Aponta para a import√¢ncia de bens acabados no portf√≥lio exportador."),
        "Part_CL": ("**Participa√ß√£o percentual dos Combust√≠veis e Lubrificantes**. "
                    "Fortemente atrelado ao setor energ√©tico e commodities globais.")
    }

    st.write(resumo_colunas.get(selected_column, 
                                 "Esta coluna cont√©m dados num√©ricos relevantes para a an√°lise das exporta√ß√µes brasileiras."))
    
    # GR√ÅFICO DE LINHA TEMPORAL
    st.subheader("Varia√ß√£o ao Longo do Tempo")
    fig_line, ax_line = plt.subplots(figsize=(10, 4))
    sns.lineplot(data=data_for_analysis, x="Data", y=selected_column, marker="o", ax=ax_line)
    ax_line.set_title(f"{selected_column} ao longo do tempo")
    ax_line.set_ylabel("Valor")
    ax_line.set_xlabel("Ano")
    st.pyplot(fig_line)
    st.write("Este gr√°fico de linha mostra como os valores dessa categoria de exporta√ß√£o variaram ao longo dos anos. "
             "√â √∫til para identificar tend√™ncias, ciclos ou quedas bruscas relacionadas a eventos econ√¥micos ou pol√≠ticas externas.")

    
    # Selecionar apenas colunas de valor
    colunas_valor = ["Valor_BK", "Valor_BI", "Valor_BC", "Valor_CL"]
    df_valores = df[colunas_valor].dropna()

    # Calcular intervalo de confian√ßa 95% para cada coluna
    intervalos = []
    for coluna in colunas_valor:
        dados = df_valores[coluna].dropna()
        media = np.mean(dados)
        desvio = np.std(dados, ddof=1)
        n = len(dados)
        erro = desvio / np.sqrt(n)
        intervalo = stats.t.interval(0.95, df=n-1, loc=media, scale=erro)
        
        intervalos.append({
            "Coluna": coluna,
            "M√©dia": round(media, 2),
            "Erro Padr√£o": round(erro, 2),
            "Limite Inferior (95%)": round(intervalo[0], 2),
            "Limite Superior (95%)": round(intervalo[1], 2)
        })

    df_intervalos = pd.DataFrame(intervalos)

    st.subheader("üìä Gr√°fico: M√©dias e Intervalos de Confian√ßa (95%)")
    fig, ax = plt.subplots(figsize=(8, 5))
    medias = df_intervalos["M√©dia"]
    erros = df_intervalos["Erro Padr√£o"]
    labels = df_intervalos["Coluna"]

    ax.bar(labels, medias, yerr=erros * stats.t.ppf(0.975, df=len(df_valores)-1), capsize=10, color="#2A9D8F")
    ax.set_ylabel("Valor M√©dio Exportado")
    ax.set_title("Intervalos de Confian√ßa das Exporta√ß√µes (95%)")
    ax.grid(axis="y", linestyle="--", alpha=0.5)

    st.pyplot(fig)

    # Interpreta√ß√£o
    st.subheader("üìå Interpreta√ß√£o")
    st.write("""
    - As barras mostram a **m√©dia das exporta√ß√µes** de cada categoria.
    - As **linhas verticais (barras de erro)** representam o intervalo de confian√ßa de 95%.
    - Intervalos mais estreitos indicam menor variabilidade, maior estabilidade.
    - Intervalos mais largos sugerem alta oscila√ß√£o nos valores ao longo do tempo.

    Esses dados ajudam a compreender a **confiabilidade das exporta√ß√µes brasileiras** por tipo de bem, e a comparar quais setores s√£o mais consistentes ou vol√°teis.
    """)

    # HISTOGRAMA
    st.subheader("Distribui√ß√£o dos Valores")
    fig_hist, ax_hist = plt.subplots(figsize=(8, 4))
    sns.histplot(data_for_analysis[selected_column], bins=20, kde=True, ax=ax_hist)
    ax_hist.set_title(f"Distribui√ß√£o de {selected_column}")
    st.pyplot(fig_hist)
    st.write("O histograma permite observar a frequ√™ncia dos valores exportados. Picos indicam valores mais recorrentes. "
            "A curva de densidade (KDE) ajuda a visualizar a forma geral da distribui√ß√£o: sim√©trica, enviesada, etc.")


    
    
elif escolha == "An√°lise üìã":
    st.title("An√°lise Estat√≠stica e Comparativa das Exporta√ß√µes")

    st.subheader("1. An√°lise de Testes Estat√≠sticos")
    st.write("""
    Nesta se√ß√£o, aplicamos testes estat√≠sticos para avaliar se os valores das exporta√ß√µes de Bens de Capital (Valor_BK) 
    t√™m sofrido varia√ß√µes significativas ao longo do tempo.
    """)
    
    # Selecionar coluna para teste estat√≠stico
    coluna_valor = "Valor_BK"  # Representa os valores dos Bens de Capital
    valores = df[coluna_valor].dropna()
    
    # Teste t para comparar a m√©dia observada com uma m√©dia te√≥rica (redu√ß√£o de 10%)
    media_teorica = valores.mean() * 0.9
    t_stat, p_valor = stats.ttest_1samp(valores, media_teorica)
    
    st.subheader("Teste t para uma Amostra")
    st.write("""
    **Objetivo:** Verificar se a m√©dia dos valores exportados difere significativamente de um valor hipot√©tico (redu√ß√£o de 10% da m√©dia atual).  
    **Interpreta√ß√£o:** Se o valor-p for menor que 0.05, rejeitamos a hip√≥tese nula, indicando mudan√ßa significativa.
    """)
    st.write(f"Estat√≠stica t: {t_stat:.4f}")
    st.write(f"Valor-p: {p_valor:.4f}")
    if p_valor < 0.05:
        st.write("Conclus√£o: Rejeitamos H‚ÇÄ. Evid√™ncias apontam para mudan√ßas significativas nas exporta√ß√µes de Bens de Capital.")
    else:
        st.write("Conclus√£o: Falhamos em rejeitar H‚ÇÄ. N√£o h√° evid√™ncias suficientes de mudan√ßa significativa.")

    st.subheader("Teste Qui-Quadrado")
    st.write("""
    **Objetivo:** Analisar se a distribui√ß√£o dos valores de exporta√ß√£o se distribui uniformemente entre diferentes faixas.  
    **Interpreta√ß√£o:** Um valor-p menor que 0.05 indica que os valores n√£o est√£o uniformemente distribu√≠dos, sugerindo concentra√ß√£o em certos intervalos.
    """)
    df["Faixa de Valor"] = pd.qcut(df[coluna_valor], q=4, labels=["Baixo", "M√©dio-Baixo", "M√©dio-Alto", "Alto"])
    contagem_faixas = df["Faixa de Valor"].value_counts()
    chi2, p_chi = stats.chisquare(contagem_faixas)
    st.write(f"Estat√≠stica Qui-Quadrado: {chi2:.4f}")
    st.write(f"Valor-p: {p_chi:.4f}")
    if p_chi < 0.05:
        st.write("Conclus√£o: Rejeitamos H‚ÇÄ. A distribui√ß√£o dos valores n√£o √© uniforme.")
    else:
        st.write("Conclus√£o: Falhamos em rejeitar H‚ÇÄ. N√£o h√° evid√™ncias suficientes para afirmar que a distribui√ß√£o seja desigual.")

    st.write("---")
    st.subheader("2. Compara√ß√£o entre Colunas e Filtros por Ano")
    st.write("""
    Nesta se√ß√£o, voc√™ pode comparar a evolu√ß√£o de duas categorias de exporta√ß√£o ao longo dos anos.  
    Utilize o filtro de anos para limitar a an√°lise a um per√≠odo espec√≠fico e observe como os setores se comportam.
    """)
    
   # Filtro por intervalo de Data (mantendo valores reais da coluna "Data")
    if "Data" in df.columns:
        datas = sorted(df["Data"].dropna().unique())

        if len(datas) < 2:
            st.warning("A coluna 'Data' possui apenas um valor. O filtro de intervalo n√£o ser√° aplicado.")
            data_inicio = data_fim = datas[0]
            df_filtrado = df[df["Data"] == data_inicio]
            st.write(f"Exibindo dados da data: {data_inicio}")
        else:
            data_inicio, data_fim = st.select_slider(
                "Selecione o intervalo de datas para an√°lise:",
                options=datas,
                value=(datas[0], datas[-1])
            )

            if data_inicio == data_fim:
                st.warning("Por favor, selecione duas datas diferentes para aplicar o filtro.")
                df_filtrado = df[df["Data"] == data_inicio]
            else:
                df_filtrado = df[(df["Data"] >= data_inicio) & (df["Data"] <= data_fim)]
                st.write(f"Exibindo dados do per√≠odo: {data_inicio} at√© {data_fim}")
                df_filtrado = df.copy()
        
        col_comp1, col_comp2 = st.columns(2)
        # Ensure numeric_cols is defined before this block
        numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()
        if "Data" in numeric_cols:
            numeric_cols.remove("Data")
        
        with col_comp1:
            col1_selecionada = st.selectbox("Selecione a 1¬™ coluna para compara√ß√£o:", numeric_cols, key="comp1")
        with col_comp2:
            # Remover a coluna selecionada na primeira sele√ß√£o para evitar compara√ß√£o duplicada
            cols_disp = [col for col in numeric_cols if col != col1_selecionada]
            col2_selecionada = st.selectbox("Selecione a 2¬™ coluna para compara√ß√£o:", cols_disp, key="comp2")
        
        st.write("Comparando as duas colunas ao longo do tempo:")

        # Gr√°fico de linha comparativo (se "Data" estiver dispon√≠vel)
        if "Data" in df_filtrado.columns:
            fig_line, ax_line = plt.subplots(figsize=(10, 5))
            df_group = df_filtrado.groupby("Data")[[col1_selecionada, col2_selecionada]].mean().reset_index()
            sns.lineplot(data=df_group, x="Data", y=col1_selecionada, marker="o", label=col1_selecionada, ax=ax_line)
            sns.lineplot(data=df_group, x="Data", y=col2_selecionada, marker="o", label=col2_selecionada, ax=ax_line)
            ax_line.set_title(f"Compara√ß√£o Temporal: {col1_selecionada} vs {col2_selecionada}")
            ax_line.set_xlabel("Data")
            ax_line.set_ylabel("Valor M√©dio")
            st.pyplot(fig_line)
            st.write("""
            No gr√°fico acima, as linhas mostram a evolu√ß√£o m√©dia dos valores exportados para as duas categorias ao longo do tempo.
            Essa compara√ß√£o permite identificar tend√™ncias relativas, poss√≠veis correla√ß√µes e impactos de eventos econ√¥micos sobre o com√©rcio.
            """)
        else:
            st.write("O gr√°fico temporal n√£o pode ser exibido pois a coluna 'Data' n√£o est√° dispon√≠vel.")
        
    

elif escolha == "Entendimentos üìö":
    st.write("---")
    st.subheader("Conclus√µes e Impactos no Contexto da Exporta√ß√£o Brasileira")

    st.image("img/ExpoBR.jpg",use_container_width=True)
    st.markdown("""
    **üóìÔ∏è Para entendimento:**
    - O ano de **2025 ainda est√° em andamento**, o que pode afetar medidas como m√©dia, mediana e interpreta√ß√£o de tend√™ncias.
    - Durante a Pandemia houve um aumento nas exporta√ß√µes.
    - Os anos de **2020 a 2022 foram impactados pela pandemia da COVID-19**, influenciando negativamente cadeias produtivas e fluxos comerciais.
    - O ano de **2023 apresenta uma recupera√ß√£o gradual**, mas os dados ainda podem ser afetados por incertezas econ√¥micas e pol√≠ticas.
    """)


    st.image("img/covid.jpg", width=300)
    st.markdown("""
    **üìä Interpreta√ß√£o Geral:**
    - Os **testes estat√≠sticos** ajudam a entender se houve **mudan√ßas significativas** nos padr√µes de exporta√ß√£o e se os dados est√£o distribu√≠dos uniformemente.
    - A **compara√ß√£o entre categorias de exporta√ß√£o**, filtradas por per√≠odo, permite identificar **diferen√ßas setoriais** ligadas a pol√≠ticas p√∫blicas, flutua√ß√µes da demanda internacional e eventos econ√¥micos relevantes.
    """)

    st.image("img/BREXPO.png", width=300)
    st.markdown("""
    **üí° Sugest√µes de Interpreta√ß√£o:**
    - Resultados estat√≠sticos significativos podem indicar **transforma√ß√µes nos investimentos** ou **na competitividade dos setores** exportadores.
    - Gr√°ficos temporais ajudam a identificar impactos de **crises econ√¥micas**, **varia√ß√µes cambiais** e **mudan√ßas nas pol√≠ticas de incentivo**.
    - Correla√ß√µes entre setores podem revelar **rela√ß√µes de depend√™ncia ou complementaridade**, mostrando a **din√¢mica do com√©rcio exterior brasileiro**.
    """)

